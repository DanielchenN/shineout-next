import { useImage } from '@sheinx/hooks';
import { getDefaultContainer } from '../config';
import classNames from 'classnames';
import React from 'react';
import showGallery from './image-event';
import { ImageProps, ImageClasses } from './image.type';
import ImageGroup from './image-group';

const PLACEHOLDER = 0;
const SRC = 1;
const ALT = 2;
const ERROR = 3;

const Image = (props: ImageProps) => {
  const {
    fit,
    error,
    jssStyle,
    className,
    placeholder,
    width = '100%',
    height = '100%',
    shape = 'rounded',
    ...rest
  } = props;

  const {
    src,
    alt,
    href,
    title,
    target,
    status,
    onClick,
    getRootProps,
    getImageProps,
    getImageDivProps,
  } = useImage({ container: getDefaultContainer(), ...rest });

  const imageStyle = jssStyle.image || ({} as ImageClasses);
  const shouldPreview = href && target === '_modal' && status !== ERROR && status !== PLACEHOLDER;
  const shouldDownload = target === '_download';

  const rootProps = getRootProps({
    download: shouldDownload,
    target: shouldDownload ? '_self' : target,
    href: !href || target !== '_modal' ? href : undefined,
    style: { width, paddingBottom: height },
  });

  const rootClass = classNames(className, imageStyle.image, {
    [imageStyle.href]: !!href,
    [imageStyle.fit]: fit === 'fit',
    [imageStyle.fill]: fit === 'fill',
    [imageStyle.center]: fit === 'center',
    [imageStyle.stretch]: fit === 'stretch',
    [imageStyle.circle]: shape === 'circle',
    [imageStyle.rounded]: shape === 'rounded',
    [imageStyle.thumbnail]: shape === 'thumbnail',
    [imageStyle.preview]: shouldPreview,
    [imageStyle.download]: shouldDownload,
  });

  const imgClass = classNames(imageStyle.img);
  const imgInnerClass = classNames(imageStyle.inner);
  const placeholderClass = classNames(imageStyle.placeholder);
  const defaultPlaceholderClass = classNames(imageStyle.defaultPlaceholder);
  const errorClass = classNames(imageStyle.error);
  const defaultErrorClass = classNames(imageStyle.defaultError);
  const maskClass = classNames(imageStyle.previewMask);

  const handleOpenModal = (e: React.MouseEvent<HTMLDivElement | HTMLAnchorElement>) => {
    // 2.0 逻辑为：如果有 onClick 事件，则不会触发 Modal
    if (onClick) {
      // 该 onClick 在 hooks 中固定触发，无需在外部单独触发
      return;
    }
    if (shouldPreview) {
      e.preventDefault();
      showGallery(jssStyle, { thumb: src, src: href || src, key: 'key' });
    }
  };

  const renderImgeInnerEl = (src?: string) => {
    const imageProps = getImageProps({ src });

    return (
      <div className={imgInnerClass}>
        <img className={imgClass} {...imageProps} />
      </div>
    );
  };

  const renderDivInnerEl = (src?: string) => {
    const imageDivProps = getImageDivProps({ style: { backgroundImage: `url(${src})` } });
    return <div className={imgInnerClass} {...imageDivProps}></div>;
  };

  // 渲染 img / div 类型的内部标签
  const renderInner = (src?: string) => {
    return fit === 'fill' || fit === 'fit' ? renderDivInnerEl(src) : renderImgeInnerEl(src);
  };

  // 默认占位图
  const renderDefaultPlaceholder = () => {
    return (
      <div className={defaultPlaceholderClass}>
        <svg
          width='16'
          height='16'
          viewBox='0 0 16 16'
          fill='none'
          xmlns='http://www.w3.org/2000/svg'
        >
          <g clipPath='url(#clip0_1483_450)'>
            <path
              d='M7.99984 0.666626C12.0499 0.666626 15.3332 3.94987 15.3332 7.99996C15.3332 12.05 12.0499 15.3333 7.99984 15.3333C3.94975 15.3333 0.666504 12.05 0.666504 7.99996C0.666504 7.63177 0.964981 7.33329 1.33317 7.33329C1.70136 7.33329 1.99984 7.63177 1.99984 7.99996C1.99984 11.3137 4.68613 14 7.99984 14C11.3135 14 13.9998 11.3137 13.9998 7.99996C13.9998 4.68625 11.3135 1.99996 7.99984 1.99996C7.63165 1.99996 7.33317 1.70148 7.33317 1.33329C7.33317 0.965103 7.63165 0.666626 7.99984 0.666626Z'
              fill='#B3B7C1'
            />
          </g>
          <defs>
            <clipPath id='clip0_1483_450'>
              <rect width='16' height='16' fill='white' />
            </clipPath>
          </defs>
        </svg>
      </div>
    );
  };

  // 占位图
  const renderPlaceholder = () => {
    if (placeholder) {
      return <div className={placeholderClass}>{placeholder}</div>;
    }
    return renderDefaultPlaceholder();
  };

  // 默认错误图
  const renderDefaultError = () => {
    return (
      <div className={defaultErrorClass}>
        {title || (
          <svg
            width='16'
            height='16'
            viewBox='0 0 16 16'
            fill='none'
            xmlns='http://www.w3.org/2000/svg'
          >
            <path
              fillRule='evenodd'
              clipRule='evenodd'
              d='M6.67122 2C7.4076 2 8.00456 2.59695 8.00456 3.33333C8.00456 3.50839 7.97008 3.68173 7.90311 3.84347L7.42418 5L8.6665 6.91387L7.18965 9.80933L8.04044 12.2235C8.2852 12.918 7.92059 13.6794 7.22608 13.9242C7.08371 13.9744 6.93386 14 6.78291 14H1.99984C1.26346 14 0.666504 13.403 0.666504 12.6667V3.33333C0.666504 2.59695 1.26346 2 1.99984 2H6.67122ZM13.9998 2C14.7362 2 15.3332 2.59695 15.3332 3.33333V12.6667C15.3332 13.403 14.7362 14 13.9998 14H10.7806C10.2061 14 9.69625 13.6321 9.51521 13.0869L8.42684 9.80933L9.81843 6.66667L8.6665 5L9.10115 3.04409C9.23672 2.43404 9.7778 2 10.4027 2H13.9998ZM4.13693 9.53628L1.99984 11.664V12C1.99984 12.3682 2.29831 12.6667 2.6665 12.6667H5.84111C6.2093 12.6667 6.50778 12.3682 6.50778 12C6.50778 11.9245 6.49497 11.8496 6.46988 11.7784L5.86317 10.058L5.1383 9.48081C4.83888 9.24225 4.40817 9.26611 4.13693 9.53628ZM10.2945 8.88333L9.95912 9.64247C9.89202 9.79403 9.88378 9.96515 9.93601 10.1225L10.6292 12.2101C10.7197 12.4827 10.9747 12.6667 11.2619 12.6667H13.3332C13.7014 12.6667 13.9998 12.3682 13.9998 12V11.7053L10.2945 8.88333ZM13.3332 3.33333H10.9377C10.6251 3.33333 10.3545 3.55045 10.2868 3.85556L10.1579 4.43666C10.1177 4.61775 10.1548 4.8074 10.2602 4.96002L11.1278 6.21597C11.2597 6.40688 11.2829 6.65263 11.1889 6.86479L10.8145 7.70933L13.9998 10.1347V4C13.9998 3.63181 13.7014 3.33333 13.3332 3.33333ZM5.69471 3.33333H2.6665C2.29831 3.33333 1.99984 3.63181 1.99984 4V10.0933L4.13693 7.96532C4.40817 7.69516 4.83888 7.6713 5.1383 7.90986L6.03493 8.62424C6.0979 8.67442 6.16629 8.71346 6.23767 8.7416L6.95367 7.33688C7.06186 7.1247 7.04864 6.87093 6.919 6.67114L6.11482 5.43183C5.99536 5.24774 5.97415 5.01664 6.05812 4.81387L6.29761 4.23555C6.43549 3.90258 6.27735 3.52087 5.94438 3.38298C5.86522 3.3502 5.78038 3.33333 5.69471 3.33333ZM3.99984 4C4.73621 4 5.33317 4.59696 5.33317 5.33333C5.33317 6.0697 4.73621 6.66667 3.99984 6.66667C3.26347 6.66667 2.6665 6.0697 2.6665 5.33333C2.6665 4.59696 3.26347 4 3.99984 4ZM3.99984 5.14286C3.89463 5.14286 3.80936 5.22813 3.80936 5.33333C3.80936 5.43854 3.89463 5.52381 3.99984 5.52381C4.10504 5.52381 4.19031 5.43854 4.19031 5.33333C4.19031 5.22813 4.10504 5.14286 3.99984 5.14286Z'
              fill='#B3B7C1'
            />
          </svg>
        )}
      </div>
    );
  };

  // 错误图
  const renderError = () => {
    if (error) {
      return <div className={errorClass}>{error}</div>;
    }
    return renderDefaultError();
  };

  // 根据图片的加载情况，渲染不同的内容
  const renderImage = () => {
    switch (status) {
      case PLACEHOLDER:
        return renderPlaceholder();
      case SRC:
        return renderInner(src);
      case ALT:
        return renderInner(alt);
      case ERROR:
        return renderError();
      default:
        return null;
    }
  };

  // 遮罩层
  const renderMask = () => {
    return (
      <span className={maskClass} onClick={handleOpenModal}>
        {shouldDownload && (
          <svg
            width='16'
            height='16'
            viewBox='0 0 16 16'
            fill='none'
            xmlns='http://www.w3.org/2000/svg'
          >
            <path
              d='M8.04471 1.33337C10.4975 1.33337 12.511 3.21415 12.7217 5.6122C14.2665 6.19072 15.3332 7.67886 15.3332 9.38232C15.3332 11.605 13.5314 13.4068 11.3087 13.4068C10.9334 13.4068 10.5643 13.3553 10.2094 13.2546C9.85296 13.1536 9.64594 12.7828 9.74697 12.4264C9.848 12.07 10.2188 11.863 10.5752 11.964C10.8114 12.031 11.0574 12.0653 11.3087 12.0653C12.7905 12.0653 13.9917 10.8641 13.9917 9.38232C13.9917 8.13308 13.1306 7.05699 11.9323 6.77203C11.6532 6.70563 11.4566 6.47365 11.4221 6.20493C11.4066 6.1487 11.3984 6.0896 11.3984 6.02859C11.3984 4.17639 9.89692 2.67487 8.04471 2.67487C6.1925 2.67487 4.69098 4.17639 4.69098 6.02859C4.69098 6.2599 4.5739 6.46386 4.39577 6.58444C4.30933 6.67434 4.19728 6.74112 4.06733 6.77203C2.86907 7.057 2.008 8.13309 2.008 9.38232C2.008 10.8641 3.20921 12.0653 4.69098 12.0653C4.94227 12.0653 5.18825 12.031 5.42445 11.964C5.78085 11.863 6.15167 12.07 6.25271 12.4264C6.35374 12.7828 6.14672 13.1536 5.79032 13.2546C5.43536 13.3553 5.06628 13.4068 4.69098 13.4068C2.46833 13.4068 0.666504 11.605 0.666504 9.38232C0.666504 7.64525 1.77575 6.13207 3.37092 5.57938C3.59648 3.19734 5.60293 1.33337 8.04471 1.33337ZM8.04471 5.35785C8.38869 5.35785 8.6722 5.61678 8.71094 5.95037L8.71546 6.02859V10.1443L9.96409 8.90618C10.2271 8.64527 10.6517 8.64693 10.9127 8.90989C11.1535 9.15263 11.1706 9.53316 10.965 9.79549L10.909 9.85846L8.51711 12.2317C8.27476 12.4722 7.89496 12.4896 7.6326 12.2849L7.56961 12.2291L5.24396 9.89574C4.98245 9.63336 4.98315 9.20867 5.24553 8.94716C5.48772 8.70577 5.86822 8.6878 6.13101 8.89282L6.1941 8.94873L7.37396 10.1329V6.02859C7.37396 5.65815 7.67427 5.35785 8.04471 5.35785Z'
              fill='white'
            />
          </svg>
        )}
        {shouldPreview && (
          <svg
            width='14'
            height='14'
            viewBox='0 0 14 14'
            fill='none'
            xmlns='http://www.w3.org/2000/svg'
          >
            <path
              d='M10.4515 6.49871C9.17216 5.51737 7.95283 5.00004 7.00016 5.00004C6.04683 5.00004 4.82683 5.51671 3.54816 6.49738C3.31083 6.67938 3.07883 6.87271 2.8615 7.06737C3.07883 7.26271 3.3115 7.45604 3.54883 7.63804C4.82883 8.61871 6.04883 9.13604 7.00216 9.13604C7.9555 9.13604 9.17483 8.61938 10.4535 7.63938C10.6902 7.45738 10.9222 7.26471 11.1388 7.07004C10.9172 6.87083 10.6879 6.68024 10.4515 6.49871ZM12.7208 6.75204C12.8288 6.86804 12.9235 6.97604 13.0002 7.07004C12.9235 7.16337 12.8288 7.27137 12.7215 7.38671C12.2717 7.86207 11.7844 8.30038 11.2642 8.69737C9.82283 9.80271 8.3295 10.4694 7.00216 10.4694C5.67483 10.4694 4.18083 9.80204 2.73816 8.69604C2.21752 8.29881 1.72972 7.86028 1.2795 7.38471C1.18307 7.28212 1.08991 7.17651 1.00016 7.06804C1.07683 6.97404 1.1715 6.86604 1.2795 6.75071C1.72928 6.27538 2.21663 5.83707 2.73683 5.44004C4.18016 4.33337 5.6735 3.66671 7.00016 3.66671C8.32683 3.66671 9.82016 4.33404 11.2628 5.44071C11.7833 5.83819 12.2708 6.27627 12.7208 6.75204ZM1.66683 1.66671V3.66671C1.66684 3.75426 1.64961 3.84097 1.61611 3.92186C1.58261 4.00276 1.53351 4.07626 1.4716 4.13818C1.4097 4.20009 1.3362 4.24921 1.25531 4.28272C1.17442 4.31623 1.08772 4.33348 1.00016 4.33348C0.912606 4.33348 0.825907 4.31623 0.745017 4.28272C0.664127 4.24921 0.590629 4.20009 0.528722 4.13818C0.466815 4.07626 0.417711 4.00276 0.384214 3.92186C0.350717 3.84097 0.333483 3.75426 0.333496 3.66671V1.00004C0.333496 0.82323 0.403734 0.65366 0.528758 0.528636C0.653783 0.403612 0.823352 0.333374 1.00016 0.333374H3.66683C3.75439 0.333361 3.84109 0.350595 3.92198 0.384092C4.00288 0.417589 4.07638 0.466693 4.1383 0.5286C4.20022 0.590507 4.24933 0.664004 4.28284 0.744895C4.31635 0.825785 4.3336 0.912484 4.3336 1.00004C4.3336 1.0876 4.31635 1.1743 4.28284 1.25519C4.24933 1.33608 4.20022 1.40957 4.1383 1.47148C4.07638 1.53339 4.00288 1.58249 3.92198 1.61599C3.84109 1.64949 3.75439 1.66672 3.66683 1.66671H1.66683ZM1.66683 12.3334H3.66683C3.84362 12.3334 4.01317 12.4037 4.13817 12.5287C4.26317 12.6537 4.33339 12.8232 4.33339 13C4.33339 13.1768 4.26317 13.3464 4.13817 13.4714C4.01317 13.5964 3.84362 13.6667 3.66683 13.6667H1.00016C0.823352 13.6667 0.653783 13.5965 0.528758 13.4714C0.403734 13.3464 0.333496 13.1769 0.333496 13V10.3334C0.333523 10.1566 0.403773 9.98704 0.528794 9.86204C0.653816 9.73703 0.823369 9.66681 1.00016 9.66681C1.17696 9.66681 1.34651 9.73703 1.47153 9.86204C1.59655 9.98704 1.6668 10.1566 1.66683 10.3334V12.3334ZM12.3335 1.66671H10.3335C10.1567 1.66668 9.98716 1.59643 9.86216 1.47141C9.73716 1.34639 9.66693 1.17683 9.66693 1.00004C9.66693 0.823247 9.73716 0.653694 9.86216 0.528672C9.98716 0.403651 10.1567 0.333401 10.3335 0.333374H13.0002C13.177 0.333374 13.3465 0.403612 13.4716 0.528636C13.5966 0.65366 13.6668 0.82323 13.6668 1.00004V3.66671C13.6668 3.8435 13.5966 4.01304 13.4715 4.13805C13.3465 4.26305 13.177 4.33327 13.0002 4.33327C12.8234 4.33327 12.6538 4.26305 12.5288 4.13805C12.4038 4.01304 12.3335 3.8435 12.3335 3.66671V1.66671ZM12.3335 12.3334V10.3334C12.3335 10.1566 12.4038 9.98704 12.5288 9.86204C12.6538 9.73703 12.8234 9.66681 13.0002 9.66681C13.177 9.66681 13.3465 9.73703 13.4715 9.86204C13.5966 9.98704 13.6668 10.1566 13.6668 10.3334V13C13.6668 13.1769 13.5966 13.3464 13.4716 13.4714C13.3465 13.5965 13.177 13.6667 13.0002 13.6667H10.3335C10.1567 13.6667 9.98716 13.5964 9.86216 13.4714C9.73716 13.3464 9.66693 13.1768 9.66693 13C9.66693 12.8232 9.73716 12.6537 9.86216 12.5287C9.98716 12.4037 10.1567 12.3334 10.3335 12.3334H12.3335ZM7.00016 8.66671C6.78129 8.66671 6.56457 8.6236 6.36236 8.53984C6.16015 8.45608 5.97642 8.33332 5.82165 8.17855C5.66689 8.02379 5.54412 7.84006 5.46036 7.63785C5.37661 7.43564 5.3335 7.21891 5.3335 7.00004C5.3335 6.78117 5.37661 6.56445 5.46036 6.36224C5.54412 6.16003 5.66689 5.97629 5.82165 5.82153C5.97642 5.66677 6.16015 5.544 6.36236 5.46024C6.56457 5.37648 6.78129 5.33337 7.00016 5.33337C7.44219 5.33337 7.86611 5.50897 8.17867 5.82153C8.49124 6.13409 8.66683 6.55801 8.66683 7.00004C8.66683 7.44207 8.49124 7.86599 8.17867 8.17855C7.86611 8.49111 7.44219 8.66671 7.00016 8.66671ZM7.00016 7.33337C7.08857 7.33337 7.17335 7.29826 7.23587 7.23574C7.29838 7.17323 7.3335 7.08845 7.3335 7.00004C7.3335 6.91164 7.29838 6.82685 7.23587 6.76434C7.17335 6.70183 7.08857 6.66671 7.00016 6.66671C6.91176 6.66671 6.82697 6.70183 6.76446 6.76434C6.70195 6.82685 6.66683 6.91164 6.66683 7.00004C6.66683 7.08845 6.70195 7.17323 6.76446 7.23574C6.82697 7.29826 6.91176 7.33337 7.00016 7.33337Z'
              fill='white'
            />
          </svg>
        )}
      </span>
    );
  };

  // 根据是否有 href 属性，渲染不同的标签
  const Tag = href ? 'a' : 'div';

  return (
    <Tag {...rootProps} className={rootClass}>
      {renderImage()}
      {(shouldPreview || shouldDownload) && renderMask()}
    </Tag>
  );
};

Image.Group = ImageGroup;

export default Image;
